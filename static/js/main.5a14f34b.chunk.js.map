{"version":3,"sources":["Algorithms/SortingAlgorithms.js","Components/Sorting/SortingVizualizer/SortingVizualizer.jsx","Components/Pathfinding/Node/Node.jsx","Algorithms/Pathfinding/dijkstras.js","Algorithms/Pathfinding/dfs.js","Algorithms/Pathfinding/bfs.js","Algorithms/Pathfinding/aStar.js","Components/Pathfinding/Pathfinding.jsx","Components/Header/Header.jsx","history.js","App.js","index.js"],"names":["bubbleSortAnimations","array","animations","sorted","counter","auxArray","slice","i","length","push","swap","insertionSortAnimations","j","selectionSortAnimations","startIdx","smallestIdx","heapSortAnimations","currentIdx","Math","floor","siftDown","buildMaxHeap","endIdx","heap","childOneIdx","childTwoIdx","idxToSwap","temp","SortingVisualizer","props","state","disabled","resetDisable","animationSpeed","handleSubmit","bind","handleChange","this","resetArray","number","setState","event","target","value","min","max","random","arrayBars","document","getElementsByClassName","randomIntInterval","style","backgroundColor","hasFinished","Animations","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","color","barOneIdxSwap","barTwoIdxSwap","height","ms","Promise","resolve","func","chosen","setRunning","sort","sortingAnimations","delay","disableButtons","className","onSubmit","type","id","placeholder","autoComplete","onChange","onClick","bubbleSort","insertionSort","selectionSort","heapSort","map","idx","key","React","Component","Node","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","clickAnimation","mouseIsPressed","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","shortestPathOrderDijkstras","nodesInShortestPathOrder","currentNode","unshift","dfs","pop","shortestPathDfs","bfs","shortestPathBfs","aStar","endDistance","getManhattanDistance","endNode","currentCol","currentRow","endCol","endRow","abs","shortestPathaStar","PathfindingVisualizer","gridWalls","getInitialGrid","animateShortestPath","getElementById","algo","shortestPath","resetBoardWithWalls","animateAlgo","newGrid","getNewGridWithWallToggled","currentGrid","newNode","createNode","hasWall","clearBoard","running","visualizeAlgo","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","Header","to","createBrowserHistory","App","useState","isRunning","history","path","exact","render","ReactDOM"],"mappings":"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","file":"static/js/main.5a14f34b.chunk.js","sourcesContent":["export function bubbleSortAnimations(array) {\n  let animations = [];\n  let sorted = false;\n  let counter = 0;\n  let auxArray = array.slice();\n\n  while (!sorted) {\n    sorted = true;\n    for (let i = 0; i < auxArray.length - 1 - counter; i++) {\n      animations.push([i, i + 1]);\n      animations.push([i, i + 1]);\n      if (auxArray[i] > auxArray[i + 1]) {\n        swap(i, i + 1, auxArray);\n        sorted = false;\n        animations.push([i, i + 1]);\n      } else {\n        animations.push([]);\n      }\n    }\n    counter++;\n  }\n  return animations;\n}\n\nexport function insertionSortAnimations(array) {\n  let animations = [];\n  let auxArray = array.slice();\n\n  for (let i = 1; i < auxArray.length; i++) {\n    let j = i;\n    if (j > 0 && auxArray[j] < auxArray[j - 1]) {\n      while (j > 0 && auxArray[j] < auxArray[j - 1]) {\n        animations.push([j, j - 1]);\n        animations.push([j, j - 1]);\n        swap(j, j - 1, auxArray);\n        animations.push([j, j - 1]);\n        j -= 1;\n      }\n    } else {\n      if (j - 1 > 0) {\n        animations.push([j, j - 1]);\n        animations.push([j, j - 1]);\n        animations.push([]);\n      } else {\n        animations.push([0, 0]);\n        animations.push([0, 0]);\n        animations.push([]);\n      }\n    }\n  }\n  return animations;\n}\n\nexport function selectionSortAnimations(array) {\n  let auxArray = array.slice();\n\n  let animations = [];\n  let startIdx = 0;\n  while (startIdx < auxArray.length - 1) {\n    let smallestIdx = startIdx;\n\n    for (let i = startIdx + 1; i < auxArray.length; i++) {\n      animations.push([startIdx, i]);\n      animations.push([startIdx, i]);\n      animations.push([]);\n\n      if (auxArray[smallestIdx] > auxArray[i]) {\n        smallestIdx = i;\n      }\n    }\n\n    animations.push([]);\n    animations.push([]);\n    swap(startIdx, smallestIdx, auxArray);\n    animations.push([startIdx, smallestIdx]);\n    startIdx++;\n  }\n  return animations;\n}\n\nexport function heapSortAnimations(array) {\n  let auxArray = array.slice();\n  let animations = [];\n  buildMaxHeap(auxArray, animations);\n  for (let endIdx = auxArray.length - 1; endIdx > 0; endIdx--) {\n    animations.push([0, endIdx]);\n    animations.push([0, endIdx]);\n    swap(0, endIdx, auxArray);\n\n    animations.push([0, endIdx]);\n\n    siftDown(0, endIdx - 1, auxArray, animations);\n  }\n  return animations;\n}\n\nfunction buildMaxHeap(array, animations) {\n  const firstParentIdx = Math.floor((array.length - 2) / 2);\n  for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\n    siftDown(currentIdx, array.length - 1, array, animations);\n  }\n}\n\nfunction siftDown(currentIdx, endIdx, heap, animations) {\n  let childOneIdx = currentIdx * 2 + 1;\n  while (childOneIdx <= endIdx) {\n    const childTwoIdx = currentIdx * 2 + 2 <= endIdx ? currentIdx * 2 + 2 : -1;\n    let idxToSwap;\n    if (childTwoIdx !== -1 && heap[childTwoIdx] > heap[childOneIdx]) {\n      idxToSwap = childTwoIdx;\n\n      animations.push([currentIdx, idxToSwap]);\n      animations.push([currentIdx, idxToSwap]);\n    } else {\n      idxToSwap = childOneIdx;\n\n      animations.push([currentIdx, idxToSwap]);\n      animations.push([currentIdx, idxToSwap]);\n    }\n    if (heap[idxToSwap] > heap[currentIdx]) {\n      swap(currentIdx, idxToSwap, heap);\n      animations.push([currentIdx, idxToSwap]);\n\n      currentIdx = idxToSwap;\n      childOneIdx = currentIdx * 2 + 1;\n    } else {\n      animations.push([]);\n\n      return;\n    }\n  }\n}\n\nfunction swap(i, j, array) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n","import React from 'react';\nimport './SortingVisualizer.css';\nimport {\n  bubbleSortAnimations,\n  insertionSortAnimations,\n  selectionSortAnimations,\n  heapSortAnimations\n} from '../../../Algorithms/SortingAlgorithms.js';\nconst ANIMATION_SPEED_MS = 1;\nconst PRIMARY_COLOR = 'white';\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      disabled: false,\n      resetDisable: false,\n      animationSpeed: 5\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  handleSubmit(number) {\n    this.setState({\n      animationSpeed: number\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      animationSpeed: event.target.value\n    });\n  }\n\n  randomIntInterval(min, max) {\n    return Math.floor(Math.random() * (max - min - 1) + min);\n  }\n\n  resetArray() {\n    const array = [];\n    const arrayBars = document.getElementsByClassName('array-bars');\n\n    for (let i = 0; i < 100; i++) {\n      array.push(this.randomIntInterval(10, 400));\n      if (arrayBars[i]) {\n        arrayBars[i].style.backgroundColor = 'white';\n      }\n    }\n    this.setState({ array });\n    this.setState({ disabled: false });\n    this.props.hasFinished();\n  }\n\n  sortingAnimations(Animations) {\n    for (let i = 0; i < Animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bars');\n      if (Animations[i] == '') {\n        continue;\n      }\n\n      if (Animations[i].length === 3) {\n        let [barOneIdx, barTwoIdx] = Animations[i];\n        let barOneStyle = arrayBars[barOneIdx].style;\n        let barTwoStyle = arrayBars[barTwoIdx].style;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n        }, i * this.state.animationSpeed);\n\n        continue;\n      }\n\n      let [barOneIdx, barTwoIdx] = Animations[i];\n      let barOneStyle = arrayBars[barOneIdx].style;\n      let barTwoStyle = arrayBars[barTwoIdx].style;\n      const colorChange = i % 3 !== 2;\n\n      if (colorChange) {\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animationSpeed);\n      } else {\n        setTimeout(() => {\n          if (i % 3 !== 1) {\n            let [barOneIdxSwap, barTwoIdxSwap] = Animations[i];\n            let barOneStyle = arrayBars[barOneIdxSwap].style.height;\n            let barTwoStyle = arrayBars[barTwoIdxSwap].style.height;\n            arrayBars[barOneIdxSwap].style.height = barTwoStyle;\n            arrayBars[barTwoIdxSwap].style.height = barOneStyle;\n          }\n        }, i * this.state.animationSpeed);\n      }\n    }\n  }\n\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async disableButtons(func, chosen) {\n    this.props.setRunning();\n    this.setState({ resetDisable: true });\n    this.setState({ disabled: true });\n    if (chosen) {\n      document.getElementsByClassName(chosen)[0].style.color = 'red';\n    }\n    let sort = func(this.state.array);\n    this.sortingAnimations(sort);\n    await this.delay(sort.length * this.state.animationSpeed);\n    this.setState({ resetDisable: false });\n    this.props.hasFinished();\n\n    for (let i = 0; i < this.state.array.length; i++) {\n      document.getElementsByClassName('array-bars')[i].style.backgroundColor =\n        'deepskyblue';\n      if (chosen) {\n        document.getElementsByClassName(chosen)[0].style.color = 'lightgrey';\n      }\n    }\n  }\n\n  bubbleSort() {\n    this.disableButtons(bubbleSortAnimations, 'Bubble');\n  }\n\n  insertionSort() {\n    this.disableButtons(insertionSortAnimations, 'Insertion');\n  }\n\n  selectionSort() {\n    this.disableButtons(selectionSortAnimations, 'Selection');\n  }\n\n  heapSort() {\n    this.disableButtons(heapSortAnimations, 'Heap');\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div className='array-container'>\n        <div>\n          <form\n            className='column player'\n            onSubmit={number => this.handleSubmit(number)}\n          >\n            <div className='row user-inputs'>\n              <input\n                type='number'\n                id='animationSpeed'\n                className='input-light'\n                placeholder='Enter Speed in Ms'\n                autoComplete='off'\n                onChange={this.handleChange}\n              />\n            </div>\n          </form>\n          <nav>\n            <button\n              onClick={() => this.resetArray()}\n              disabled={this.state.resetDisable}\n            >\n              Generate New Array\n            </button>\n            <button\n              className='Bubble'\n              onClick={() => this.bubbleSort()}\n              disabled={this.state.disabled}\n            >\n              Bubble Sort\n            </button>\n            <button\n              className='Insertion'\n              onClick={() => this.insertionSort()}\n              disabled={this.state.disabled}\n            >\n              Insertion Sort\n            </button>\n            <button\n              className='Selection'\n              onClick={() => this.selectionSort()}\n              disabled={this.state.disabled}\n            >\n              Selection Sort\n            </button>\n            <button\n              className='Heap'\n              onClick={() => this.heapSort()}\n              disabled={this.state.disabled}\n            >\n              Heap Sort\n            </button>\n          </nav>\n        </div>\n\n        {array.map((value, idx) => (\n          <div\n            className='array-bars'\n            key={idx}\n            style={{ height: `${value}px` }}\n          ></div>\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n      mouseIsPressed\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    const clickAnimation = mouseIsPressed ? 'mouse-pressed' : null;\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName} ${clickAnimation}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n","export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function shortestPathOrderDijkstras(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function dfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = [startNode];\n\n  while (!!unvisitedNodes.length) {\n    const closestNode = unvisitedNodes.pop();\n\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) {\n      return visitedNodesInOrder;\n    }\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) {\n      return visitedNodesInOrder;\n    }\n    updateUnvisitedNeighbors(closestNode, grid, unvisitedNodes);\n  }\n}\n\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n    unvisitedNodes.push(neighbor);\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nexport function shortestPathDfs(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function bfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = [startNode];\n\n  let count = 50;\n  while (!!unvisitedNodes.length) {\n    const closestNode = unvisitedNodes.shift();\n\n    if (closestNode.isWall || closestNode.isVisited) continue;\n    if (closestNode.distance === Infinity) {\n      return visitedNodesInOrder;\n    }\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) {\n      return visitedNodesInOrder;\n    }\n    count--;\n    updateUnvisitedNeighbors(closestNode, grid, unvisitedNodes);\n  }\n  return visitedNodesInOrder;\n}\n\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n    unvisitedNodes.push(neighbor);\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nexport function shortestPathBfs(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function aStar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  startNode.endDistance = getManhattanDistance(startNode, finishNode);\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) {\n      return visitedNodesInOrder;\n    }\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid, finishNode);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.endDistance - nodeB.endDistance);\n}\n\nfunction getManhattanDistance(currentNode, endNode) {\n  const currentCol = currentNode.col;\n  const currentRow = currentNode.row;\n  const endCol = endNode.col;\n  const endRow = endNode.row;\n\n  const colDistance = Math.abs(currentCol - endCol);\n  const rowDistance = Math.abs(currentRow - endRow);\n  return colDistance + rowDistance;\n}\n\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n    neighbor.endDistance =\n      getManhattanDistance(neighbor, finishNode) + node.distance;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nexport function shortestPathaStar(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { Component } from 'react';\nimport Node from './Node/Node';\nimport {\n  dijkstra,\n  shortestPathOrderDijkstras\n} from '../../Algorithms/Pathfinding/dijkstras.js';\nimport { dfs, shortestPathDfs } from '../../Algorithms/Pathfinding/dfs.js';\nimport { bfs, shortestPathBfs } from '../../Algorithms/Pathfinding/bfs.js';\nimport {\n  aStar,\n  shortestPathaStar\n} from '../../Algorithms/Pathfinding/aStar.js';\n\nconst START_NODE_ROW = 7;\nconst START_NODE_COL = 7;\nconst FINISH_NODE_ROW = 7;\nconst FINISH_NODE_COL = 35; //35\nconst ROW_SIZE = 15;\nconst COL_SIZE = 40;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      gridWalls: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid: grid.slice(), gridWalls: grid.slice() });\n  }\n\n  animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  async animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      await setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n\n    this.props.hasFinished();\n  }\n\n  async visualizeAlgo(algo, shortestPath) {\n    this.props.setRunning();\n    this.resetBoardWithWalls();\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = algo(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = shortestPath(finishNode);\n    await this.animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder);\n    getInitialGrid();\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true, gridWalls: newGrid });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, gridWalls: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  resetBoardWithWalls() {\n    const currentGrid = this.state.grid;\n    const grid = [];\n    for (let row = 0; row < ROW_SIZE; row++) {\n      const currentRow = [];\n      for (let col = 0; col < COL_SIZE; col++) {\n        const node = currentGrid[row][col];\n        const newNode = createNode(col, row);\n\n        let hasWall = null;\n        if (node.isWall) {\n          hasWall = 'node-wall';\n          newNode.isWall = !newNode.isWall;\n        }\n        document.getElementById(\n          `node-${row}-${col}`\n        ).className = `node null ${hasWall}`;\n\n        currentRow.push(newNode);\n      }\n      grid.push(currentRow);\n    }\n\n    document.getElementById(\n      `node-${START_NODE_ROW}-${START_NODE_COL}`\n    ).className = 'node node-start';\n\n    document.getElementById(\n      `node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`\n    ).className = 'node node-finish';\n\n    this.setState({ grid });\n  }\n\n  clearBoard() {\n    const grid = [];\n    for (let row = 0; row < ROW_SIZE; row++) {\n      const currentRow = [];\n      for (let col = 0; col < COL_SIZE; col++) {\n        document.getElementById(`node-${row}-${col}`).className = 'node null';\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n\n    document.getElementById(\n      `node-${START_NODE_ROW}-${START_NODE_COL}`\n    ).className = 'node node-start';\n\n    document.getElementById(\n      `node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`\n    ).className = 'node node-finish';\n\n    this.setState({ grid });\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <>\n        <button onClick={() => this.clearBoard()} disabled={this.props.running}>\n          Clear Board\n        </button>\n\n        <button\n          onClick={() =>\n            this.visualizeAlgo(dijkstra, shortestPathOrderDijkstras)\n          }\n          disabled={this.props.running}\n        >\n          Dijkstra's Algorithm\n        </button>\n        <button\n          onClick={() => this.visualizeAlgo(aStar, shortestPathaStar)}\n          disabled={this.props.running}\n        >\n          A* Algorithm\n        </button>\n        <button\n          onClick={() => this.visualizeAlgo(dfs, shortestPathDfs)}\n          disabled={this.props.running}\n        >\n          Depth first search\n        </button>\n        <button\n          onClick={() => this.visualizeAlgo(bfs, shortestPathBfs)}\n          disabled={this.props.running}\n        >\n          Breadth first search\n        </button>\n        <div className='grid'>\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < ROW_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < COL_SIZE; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n    endDistance: Infinity\n  };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Header({ running }) {\n  return (\n    <div style={{ color: 'white' }}>\n      <Link to='/'>\n        <button disabled={running}>Sorting</button>\n      </Link>\n      <Link to='/pathfinding'>\n        <button disabled={running}>Pathfinding</button>\n      </Link>\n    </div>\n  );\n}\n\nexport default Header;\n","import { createBrowserHistory } from 'history';\nexport default createBrowserHistory();\n","import React, { useState, useEffect } from 'react';\nimport SortingVisualizer from './Components/Sorting/SortingVizualizer/SortingVizualizer.jsx';\nimport Pathfinding from './Components/Pathfinding/Pathfinding';\nimport Header from './Components/Header/Header.jsx';\nimport './App.css';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport history from './history';\n\nfunction App() {\n  const [running, setRunning] = useState(false);\n\n  const isRunning = () => {\n    setRunning(true);\n  };\n\n  const hasFinished = () => {\n    setRunning(false);\n  };\n\n  return (\n    <div className='App'>\n      <div>\n        <Router history={history}>\n          <div className='header'>\n            <Header running={running} />\n          </div>\n\n          <Route\n            path='/'\n            exact\n            render={() => (\n              <SortingVisualizer\n                setRunning={isRunning}\n                hasFinished={hasFinished}\n              />\n            )}\n          />\n          <Route\n            path='/pathfinding'\n            exact\n            render={() => (\n              <div>\n                <div className='text'>\n                  Click and hold to create walls on the grid.\n                </div>\n                <Pathfinding\n                  setRunning={isRunning}\n                  hasFinished={hasFinished}\n                  running={running}\n                />\n              </div>\n            )}\n          />\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}