{"version":3,"sources":["Algorithms/SortingAlgorithms.js","SortingVizualizer/SortingVizualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["bubbleSortAnimations","array","animations","sorted","counter","auxArray","slice","i","length","push","swap","insertionSortAnimations","j","selectionSortAnimations","startIdx","smallestIdx","heapSortAnimations","currentIdx","Math","floor","siftDown","buildMaxHeap","endIdx","heap","childOneIdx","childTwoIdx","idxToSwap","temp","SortingVisualizer","props","state","disabled","resetDisable","animationSpeed","handleSubmit","bind","handleChange","this","resetArray","number","setState","event","target","value","console","log","min","max","random","arrayBars","document","getElementsByClassName","randomIntInterval","style","backgroundColor","Animations","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","color","barOneIdxSwap","barTwoIdxSwap","height","ms","Promise","resolve","func","chosen","sort","sortingAnimations","delay","disableButtons","className","onSubmit","type","id","placeholder","autoComplete","onChange","onClick","bubbleSort","insertionSort","selectionSort","heapSort","map","idx","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3e3db43.chunk.js","sourcesContent":["export function bubbleSortAnimations(array) {\n  let animations = [];\n  let sorted = false;\n  let counter = 0;\n  let auxArray = array.slice();\n\n  while (!sorted) {\n    sorted = true;\n    for (let i = 0; i < auxArray.length - 1 - counter; i++) {\n      animations.push([i, i + 1]);\n      animations.push([i, i + 1]);\n      if (auxArray[i] > auxArray[i + 1]) {\n        swap(i, i + 1, auxArray);\n        sorted = false;\n        animations.push([i, i + 1]);\n      } else {\n        animations.push([]);\n      }\n    }\n    counter++;\n  }\n  return animations;\n}\n\n/* export function bubbleSortAnimations(array) {\n  let animations = [];\n  let sorted = false;\n  let counter = 0;\n\n  while (!sorted) {\n    sorted = true;\n    for (let i = 0; i < array.length - 1 - counter; i++) {\n      animations.push([i, i + 1]);\n      animations.push([i, i + 1]);\n      if (array[i] > array[i + 1]) {\n        swap(i, i + 1, array);\n        sorted = false;\n        animations.push([i, i + 1]);\n      } else {\n        animations.push([]);\n      }\n    }\n    counter++;\n  }\n  return animations;\n} */\n\nexport function insertionSortAnimations(array) {\n  let animations = [];\n  let auxArray = array.slice();\n\n  for (let i = 1; i < auxArray.length; i++) {\n    let j = i;\n    if (j > 0 && auxArray[j] < auxArray[j - 1]) {\n      while (j > 0 && auxArray[j] < auxArray[j - 1]) {\n        animations.push([j, j - 1]);\n        animations.push([j, j - 1]);\n        swap(j, j - 1, auxArray);\n        animations.push([j, j - 1]);\n        j -= 1;\n      }\n    } else {\n      if (j - 1 > 0) {\n        animations.push([j, j - 1]);\n        animations.push([j, j - 1]);\n        animations.push([]);\n      } else {\n        animations.push([0, 0]);\n        animations.push([0, 0]);\n        animations.push([]);\n      }\n    }\n  }\n  return animations;\n}\n\nexport function selectionSortAnimations(array) {\n  let auxArray = array.slice();\n\n  let animations = [];\n  let startIdx = 0;\n  while (startIdx < auxArray.length - 1) {\n    let smallestIdx = startIdx;\n\n    for (let i = startIdx + 1; i < auxArray.length; i++) {\n      animations.push([startIdx, i]);\n      animations.push([startIdx, i]);\n      animations.push([]);\n\n      if (auxArray[smallestIdx] > auxArray[i]) {\n        smallestIdx = i;\n      }\n    }\n\n    animations.push([]);\n    animations.push([]);\n    swap(startIdx, smallestIdx, auxArray);\n    animations.push([startIdx, smallestIdx]);\n    startIdx++;\n  }\n  return animations;\n}\n\nexport function heapSortAnimations(array) {\n  let auxArray = array.slice();\n  let animations = [];\n  buildMaxHeap(auxArray, animations);\n  for (let endIdx = auxArray.length - 1; endIdx > 0; endIdx--) {\n    animations.push([0, endIdx]);\n    animations.push([0, endIdx]);\n    swap(0, endIdx, auxArray);\n\n    animations.push([0, endIdx]);\n\n    siftDown(0, endIdx - 1, auxArray, animations);\n  }\n  return animations;\n}\n\nfunction buildMaxHeap(array, animations) {\n  const firstParentIdx = Math.floor((array.length - 2) / 2);\n  for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\n    siftDown(currentIdx, array.length - 1, array, animations);\n  }\n}\n\nfunction siftDown(currentIdx, endIdx, heap, animations) {\n  let childOneIdx = currentIdx * 2 + 1;\n  while (childOneIdx <= endIdx) {\n    const childTwoIdx = currentIdx * 2 + 2 <= endIdx ? currentIdx * 2 + 2 : -1;\n    let idxToSwap;\n    if (childTwoIdx !== -1 && heap[childTwoIdx] > heap[childOneIdx]) {\n      idxToSwap = childTwoIdx;\n\n      animations.push([currentIdx, idxToSwap]);\n      animations.push([currentIdx, idxToSwap]);\n    } else {\n      idxToSwap = childOneIdx;\n\n      animations.push([currentIdx, idxToSwap]);\n      animations.push([currentIdx, idxToSwap]);\n    }\n    if (heap[idxToSwap] > heap[currentIdx]) {\n      swap(currentIdx, idxToSwap, heap);\n      animations.push([currentIdx, idxToSwap]);\n\n      currentIdx = idxToSwap;\n      childOneIdx = currentIdx * 2 + 1;\n    } else {\n      animations.push([]);\n\n      return;\n    }\n  }\n}\n\nfunction swap(i, j, array) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n","import React from 'react';\nimport './SortingVisualizer.css';\nimport {\n  bubbleSortAnimations,\n  insertionSortAnimations,\n  selectionSortAnimations,\n  heapSortAnimations\n} from '../Algorithms/SortingAlgorithms.js';\nconst ANIMATION_SPEED_MS = 1;\nconst PRIMARY_COLOR = 'white';\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      disabled: false,\n      resetDisable: false,\n      animationSpeed: 5\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  handleSubmit(number) {\n    this.setState({\n      animationSpeed: number\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      animationSpeed: event.target.value\n    });\n    console.log(this.state.animationSpeed);\n  }\n\n  randomIntInterval(min, max) {\n    return Math.floor(Math.random() * (max - min - 1) + min);\n  }\n\n  resetArray() {\n    const array = [];\n    const arrayBars = document.getElementsByClassName('array-bars');\n\n    for (let i = 0; i < 100; i++) {\n      array.push(this.randomIntInterval(10, 400));\n      if (arrayBars[i]) {\n        arrayBars[i].style.backgroundColor = 'white';\n      }\n    }\n    this.setState({ array });\n    this.setState({ disabled: false });\n  }\n\n  sortingAnimations(Animations) {\n    for (let i = 0; i < Animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bars');\n      if (Animations[i] == '') {\n        continue;\n      }\n\n      if (Animations[i].length === 3) {\n        let [barOneIdx, barTwoIdx] = Animations[i];\n        let barOneStyle = arrayBars[barOneIdx].style;\n        let barTwoStyle = arrayBars[barTwoIdx].style;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n        }, i * this.state.animationSpeed);\n\n        continue;\n      }\n\n      let [barOneIdx, barTwoIdx] = Animations[i];\n      let barOneStyle = arrayBars[barOneIdx].style;\n      let barTwoStyle = arrayBars[barTwoIdx].style;\n      const colorChange = i % 3 !== 2;\n\n      if (colorChange) {\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animationSpeed);\n      } else {\n        setTimeout(() => {\n          if (i % 3 !== 1) {\n            let [barOneIdxSwap, barTwoIdxSwap] = Animations[i];\n            let barOneStyle = arrayBars[barOneIdxSwap].style.height;\n            let barTwoStyle = arrayBars[barTwoIdxSwap].style.height;\n            arrayBars[barOneIdxSwap].style.height = barTwoStyle;\n            arrayBars[barTwoIdxSwap].style.height = barOneStyle;\n          }\n        }, i * this.state.animationSpeed);\n      }\n    }\n  }\n\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async disableButtons(func, chosen) {\n    this.setState({ resetDisable: true });\n    this.setState({ disabled: true });\n    if (chosen) {\n      document.getElementsByClassName(chosen)[0].style.color = 'red';\n    }\n    let sort = func(this.state.array);\n    this.sortingAnimations(sort);\n    await this.delay(sort.length * this.state.animationSpeed);\n    this.setState({ resetDisable: false });\n    for (let i = 0; i < this.state.array.length; i++) {\n      document.getElementsByClassName('array-bars')[i].style.backgroundColor =\n        'deepskyblue';\n      if (chosen) {\n        document.getElementsByClassName(chosen)[0].style.color = 'lightgrey';\n      }\n    }\n  }\n\n  bubbleSort() {\n    this.disableButtons(bubbleSortAnimations, 'Bubble');\n  }\n\n  insertionSort() {\n    this.disableButtons(insertionSortAnimations, 'Insertion');\n  }\n\n  selectionSort() {\n    this.disableButtons(selectionSortAnimations, 'Selection');\n  }\n\n  heapSort() {\n    this.disableButtons(heapSortAnimations, 'Heap');\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div className='array-container'>\n        <div>\n          <h1>Sorting Visualizer.</h1>\n          <form\n            className='column player'\n            onSubmit={number => this.handleSubmit(number)}\n          >\n            <div className='row user-inputs'>\n              <input\n                type='number'\n                id='animationSpeed'\n                className='input-light'\n                placeholder='Enter Speed in Ms!'\n                autoComplete='off'\n                value={this.state.animationSpeed}\n                onChange={this.handleChange}\n              />\n            </div>\n          </form>\n          <nav>\n            <button\n              onClick={() => this.resetArray()}\n              disabled={this.state.resetDisable}\n            >\n              Generate New Array\n            </button>\n            <button\n              className='Bubble'\n              onClick={() => this.bubbleSort()}\n              disabled={this.state.disabled}\n            >\n              Bubble Sort\n            </button>\n            <button\n              className='Insertion'\n              onClick={() => this.insertionSort()}\n              disabled={this.state.disabled}\n            >\n              Insertion Sort\n            </button>\n            <button\n              className='Selection'\n              onClick={() => this.selectionSort()}\n              disabled={this.state.disabled}\n            >\n              Selection Sort\n            </button>\n            <button\n              className='Heap'\n              onClick={() => this.heapSort()}\n              disabled={this.state.disabled}\n            >\n              Heap Sort\n            </button>\n          </nav>\n        </div>\n\n        {array.map((value, idx) => (\n          <div\n            className='array-bars'\n            key={idx}\n            style={{ height: `${value}px` }}\n          ></div>\n        ))}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport SortingVisualizer from './SortingVizualizer/SortingVizualizer.jsx';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}